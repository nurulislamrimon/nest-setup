// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// while creating a new model make sure added the model to the IModelMapping else filter and search will not work
model Administrator {
  id            Int                      @id @default(autoincrement())
  full_name     String
  phone_number  String
  email         String                   @unique
  password      String
  role          administrator_role_types @default(user)
  profile_photo String?
  address       String?

  is_active  Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  administrator_sessions AdministratorSession[]

  @@index([email])
}

// role enum
enum administrator_role_types {
  user
  manager
  admin
  super_admin

  @@map("role_types")
}

model AdministratorSession {
  id         Int       @id @default(autoincrement())
  ip         String
  user_agent String
  device     String
  platform   String
  browser    String
  is_active  Boolean   @default(true)
  // dates
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  administrator_id Int
  administrator    Administrator? @relation(fields: [administrator_id], references: [id])
}

// while creating a new model make sure added the model to the IModelMapping else filter and search will not work
model Seller {
  id            Int               @id @default(autoincrement())
  full_name     String
  phone_number  String
  email         String            @unique
  password      String
  role          seller_role_types @default(regular)
  profile_photo String?
  address       String?

  is_active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  seller_sessions SellerSession[]

  @@index([email])
}

// role enum
enum seller_role_types {
  regular
  premium
}

model SellerSession {
  id         Int       @id @default(autoincrement())
  ip         String
  user_agent String
  device     String
  platform   String
  browser    String
  is_active  Boolean   @default(true)
  // dates
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  seller_id Int
  seller    Seller? @relation(fields: [seller_id], references: [id])
}
